red_board = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]
yellow_board = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]
in_column = [0, 0, 0, 0, 0, 0, 0]
turns_passed = 0

def is_win(board, column, row):
    #check down column for connect 4
    if row > 2:
        for i in range(1, 4):
            if not board[row-i][column]:
                break
        else:
            return True

    #check across row for connect 4
    adjacent = 0
    #to the left
    for i in range(1, min(column+1, 4)):
        if not board[row][column-i]:
            break
        adjacent += 1
    #to the right
    for i in range(1, min(7-column, 4)):
        if not board[row][column+i]:
            break
        adjacent += 1
    if adjacent > 2:
        return True

    #check across up-left diagonal for connect 4
    diagonal1 = 0
    #to the left
    for i in range(1, min(column+1, 6-row, 4)):
        if not board[row+i][column-i]:
            break
        diagonal1 += 1
    #to the right
    for i in range(1, min(7-column, row+1, 4)):
        if not board[row-i][column+i]:
            break
        diagonal1 += 1
    if diagonal1 > 2:
        return True

    #check across up-right diagonal for connect 4
    diagonal2 = 0
    #to the left
    for i in range(1, min(column+1, row+1, 4)):
        if not board[row-i][column-i]:
            break
        diagonal2 += 1
    #to the right
    for i in range(1, min(7-column, 6-row, 4)):
        if not board[row+i][column+i]:
            break
        diagonal2 += 1
    if diagonal2 > 2:
        return True

    #if all else fails...
    return False

def display(board1, board2):
    #print numbers above board
    print("")
    for i in range(1, 8):
        print(" " + str(i), end=" ")
    print("")
    #print rows going upwards
    for i in range(5, -1, -1):
        #print value in each column, check for red, yellow, or neither
        for j in range(7):
            print(" ", end="")
            if board1[i][j]:
                print("X", end="")
            elif board2[i][j]:
                print("O", end="")
            else:
                print("-", end="")
            print(" ", end="")
        #print return after each row
        print("")
    #print extra return at end
    print("")

#display board at start of game
display(red_board, yellow_board)
while turns_passed < 21:
    #red's turn
    c = int(input("Red to play (enter column number): "))
    while c < 1 or c > 7 or in_column[c-1] == 6:
        c = int(input("Please enter a valid column number: "))
    c -= 1
    r = in_column[c]
    red_board[r][c] += 1
    in_column[c] += 1
    display(red_board, yellow_board)
    #checks for win conditions after red's turn
    if is_win(red_board, c, r):
        print("Connect 4! Red wins!")
        break

    #yellow's turn
    c = int(input("Yellow to play (enter column number): "))
    while c < 1 or c > 7 or in_column[c-1] == 6:
        c = int(input("Please enter a valid column number: "))
    c -= 1
    r = in_column[c]
    yellow_board[r][c] += 1
    in_column[c] += 1
    display(red_board, yellow_board)
    #checks for win conditions after yellow's turn
    if is_win(yellow_board, c, r):
        print("Connect 4! Yellow wins!")
        break
    turns_passed += 1
#if turns_passed has reached 21 without any wins, draw declared
else:
    print("It's a draw! Play again?")
